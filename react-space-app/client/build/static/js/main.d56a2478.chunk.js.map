{"version":3,"sources":["utils/mutations.js","utils/auth.js","components/FrontPage.js","components/SignUp.js","App.js","reportWebVitals.js","index.js"],"names":["LOGIN_USER","gql","decode","this","getToken","token","isTokenExpired","exp","Date","now","localStorage","removeItem","err","getItem","idToken","setItem","window","location","assign","FrontPage","useState","email","password","userFormState","setUserFormState","useMutation","loginUser","handleChange","event","target","name","value","handleFormSubmit","a","preventDefault","currentTarget","checkValidity","stopPropagation","variables","data","Auth","login","console","error","id","type","onChange","required","minLength","maxLength","onClick","SignUp","props","minlength","maxlength","pageChanger","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","currentPage","setCurrentPage","page","ApolloProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d56a2478.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser($name: String!, $email: String!, $password: String!) {\r\n    addUser(name: $name, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// Need to test when Front end is done\r\nexport const REMOVE_USER = gql`\r\n  mutation removeUser($name: String!) {\r\n    removeUser(name: $name) {\r\n      token\r\n      user {\r\n        _id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_PHOTO = gql`\r\nmutation addPhoto($userId: ID!, $photo: String!) {\r\n    addPhoto(userId: $userId, photo: $photo) {\r\n        _id\r\n        name\r\n        photos\r\n      }\r\n    }\r\n    `;\r\n\r\n// Need to test when Front end is done\r\nexport const DELETE_PHOTO = gql`\r\nmutation deletePhoto($photo: String!) {\r\n    deletePhoto(photo: $photo) {\r\n        _id\r\n        name\r\n        photos\r\n      }\r\n    }\r\n    `;\r\n\r\nexport const ADD_PREF = gql`\r\nmutation addPref($userId: ID!, $pref: String!) {\r\n    addPref(userId: $userId, pref: $pref) {\r\n        _id\r\n        name\r\n        preferences\r\n      }\r\n    }\r\n    `;\r\n\r\n// Need to test when front end is done\r\nexport const DELETE_PREF = gql`\r\nmutation deletePref($pref: String!) {\r\n    deletePref(pref: $pref) {\r\n        _id\r\n        name\r\n        preferences\r\n      }\r\n    }\r\n    `;","// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        localStorage.removeItem('id_token')\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();","import React, { useState } from \"react\";\r\nimport { useMutation } from '@apollo/client';\r\nimport { LOGIN_USER } from \"../utils/mutations\";\r\nimport Auth from '../utils/auth';\r\nimport '../styles/frontpage.css';\r\n\r\nconst FrontPage = () => {\r\n    const [userFormState, setUserFormState] = useState({ email: '', password: '' });\r\n    const [loginUser] = useMutation(LOGIN_USER);\r\n    //const [validated] = useState(false);\r\n   // const [showAlert, setShowAlert] = useState(false);\r\n\r\n    const handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n        setUserFormState({ ...userFormState, [name]: value });\r\n    };\r\n\r\n    const handleFormSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // check if form has everything (as per react-bootstrap docs)\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n\r\n        try {\r\n            const { data } = await loginUser({\r\n                variables: { ...userFormState },\r\n            });\r\n\r\n            Auth.login(data.login.token);\r\n        } catch (err) {\r\n            console.error(err);\r\n            //setShowAlert(true);\r\n        }\r\n\r\n        setUserFormState({\r\n            email: '',\r\n            password: '',\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div id=\"frontContainer\">\r\n                <div id=\"frontImage\">\r\n                    <div id=\"frontSpacingContainer\">\r\n                        <div id=\"frontRowOne\">\r\n                            <div id=\"frontLogin\">\r\n                                <div id=\"frontNameContainer\">\r\n                                    <p>Please Enter Email</p>\r\n                                    <input type=\"email\" id=\"frontName\" name=\"email\" value={userFormState.email}\r\n                                        onChange={handleChange} required minLength=\"8\" maxLength=\"16\"></input>\r\n                                </div>\r\n                                <div id=\"frontPwContainer\">\r\n                                    <p>Please Enter Password</p>\r\n                                    <input type=\"password\" id=\"frontPw\" name=\"password\" value={userFormState.password}\r\n                                        onChange={handleChange} required minLength=\"8\" maxLength=\"16\"></input>\r\n                                </div>\r\n                                <button id=\"frontSubmit\" onClick={handleFormSubmit}>Enter</button>\r\n                                <button id=\"frontSignButton\">Sign Up</button>\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"frontRowTwo\"></div>\r\n                        <div id=\"frontRowThree\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default FrontPage;","import React, { useState } from \"react\";\r\nimport \"../styles/signup.css\";\r\n\r\nfunction SignUp(props) {\r\n    return (\r\n        <> \r\n            <div id=\"SignUp\">\r\n                <div id=\"SignUpInput\">\r\n                    <div id=\"signUpEmailContainer\">\r\n                        <p>Please Enter Email</p>\r\n                    <input type=\"input\" id=\"signUpEmail\" name=\"email\" required minlength=\"8\" maxlength=\"32\"></input>\r\n                    </div>\r\n                    <div id=\"signUpPwContainer\">\r\n                        <p>Please Enter Password</p>\r\n                    <input  type=\"input\" id=\"signUpPw\" name=\"password\" required minlength=\"8\" maxlength=\"16\"></input>\r\n                    </div>\r\n                    <div id=\"signUpButton\">\r\n                    <button onClick = {() => props.pageChanger(\"SignUp\")}>Sign Up</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\nexport default SignUp;","import './styles/App.css';\r\nimport React, { useState } from \"react\";\r\nimport FrontPage from \"./components/FrontPage\";\r\nimport Profile from \"../src/pages/Profile\";\r\nimport SignUp from \"./components/SignUp\";\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem('id_token');\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\n\r\nfunction App() {\r\n\r\n  const [currentPage, setCurrentPage] = useState('Home');\r\n\r\n  //    // This method is checking to see what the value of `currentPage` is. Depending on the value of currentPage, we return the corresponding component to render.\r\n    const renderPage = () => {\r\n      if (currentPage === 'Home') {\r\n        return <FrontPage pageChanger = {pageChanger}/>;\r\n      }\r\n      if (currentPage === 'SignUp'){\r\n        return <SignUp/>\r\n      }\r\n    };\r\n  \r\n  const pageChanger = (page) => setCurrentPage(page);\r\n  \r\n    return (\r\n      <ApolloProvider client={client}>\r\n      <div>\r\n        {renderPage()}\r\n      </div>\r\n      </ApolloProvider>\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}